// Generated automatically from ./src/cgi/env/env.wren. Do not edit.
static const char* envModuleSource =
"import { type } from \"os\"\n"
"\n"
"class Env {\n"
"  // Segmentation fault if name arg is null\n"
"  // so a wrapper is needed for public api\n"
"  foreign static f_get(name)\n"
"  static get(name) {\n"
"    if (name is String && name.trim().count > 0) {\n"
"      return f_get(name)\n"
"    }\n"
"    return \"\"\n"
"  }\n"
"\n"
"  // f_all only return the names\n"
"  // the map must be done in Wren, not in C\n"
"  // due to the lack of apis of Wren 0.3\n"
"  foreign static f_all\n"
"  static all {\n"
"    var env = {}\n"
"    f_all.each{|name|\n"
"      env[name] = f_get(name)\n"
"    }\n"
"    return env\n"
"  }\n"
"}\n"
"\n"
"class Server {\n"
"  static name {Env.get(\"SERVER_NAME\")}\n"
"  static protocol {Env.get(\"SERVER_PROTOCOL\")}\n"
"  static software {Env.get(\"SERVER_SOFTWARE\")}\n"
"  static port {Env.get(\"SERVER_PORT\")}\n"
"  static address {Env.get(\"SERVER_ADDR\")}\n"
"  static gateway {Env.get(\"GATEWAY_INTERFACE\")}\n"
"  static script {Env.get(\"SCRIPT_NAME\")}\n"
"  static pathInfo {Env.get(\"PATH_INFO\")}\n"
"  static pathTranslated {Env.get(\"PATH_TRANSLATED\")}\n"
"  static signature {Env.get(\"SERVER_SIGNATURE\")}\n"
"  static admin {Env.get(\"SERVER_ADMIN\")}\n"
"  static prefix {Env.get(\"CONTEXT_PREFIX\")}\n"
"  static documentRoot {Env.get(\"CONTEXT_DOCUMENT_ROOT\")}\n"
"  static host {Env.get(\"HTTP_HOST\")}\n"
"\n"
"  static all {{\n"
"    \"name\": name,\n"
"    \"protocol\": protocol,\n"
"    \"software\": software,\n"
"    \"port\": port,\n"
"    \"address\": address,\n"
"    \"gateway\": gateway,\n"
"    \"script\": script,\n"
"    \"pathInfo\": pathInfo,\n"
"    \"pathTranslated\": pathTranslated,\n"
"    \"signature\": signature,\n"
"    \"admin\": admin,\n"
"    \"prefix\": prefix,\n"
"    \"documentRoot\": documentRoot,\n"
"    \"host\": host\n"
"  }}\n"
"}\n"
"\n"
"class Request {\n"
"  static uri {Env.get(\"REQUEST_URI\")}\n"
"  static method {Env.get(\"REQUEST_METHOD\")}\n"
"  static auth {Env.get(\"AUTH_TYPE\")}\n"
"  static type {Env.get(\"CONTENT_TYPE\")}\n"
"  static length {Env.get(\"CONTENT_LENGTH\")}\n"
"  static query {Env.get(\"QUERY_STRING\")}\n"
"  static host {Env.get(\"REMOTE_HOST\")}\n"
"  static address {Env.get(\"REMOTE_ADDR\")}\n"
"  static user {Env.get(\"REMOTE_USER\")}\n"
"  static ident {Env.get(\"REMOTE_IDENT\")}\n"
"  static accept {Env.get(\"HTTP_ACCEPT\")}\n"
"  static agent {Env.get(\"HTTP_USER_AGENT\")}\n"
"  static referer {Env.get(\"HTTP_REFERER\")}\n"
"  static cookie {Env.get(\"HTTP_COOKIE\")}\n"
"  static language {Env.get(\"HTTP_ACCEPT_LANGUAGE\")}\n"
"  static scheme {Env.get(\"REQUEST_SCHEME\")}\n"
"  static connection {Env.get(\"HTTP_CONNECTION\")}\n"
"  static dnt {Env.get(\"HTTP_DNT\")}\n"
"  static gpc {Env.get(\"HTTP_SEC_GPC\")}\n"
"  static encoding {Env.get(\"HTTP_ACCEPT_ENCODING\")}\n"
"  static upgrade {Env.get(\"HTTP_UPGRADE_INSECURE_REQUESTS\")}\n"
"\n"
"  static all {{\n"
"    \"uri\": uri,\n"
"    \"method\": method,\n"
"    \"auth\": auth,\n"
"    \"type\": type,\n"
"    \"length\": length,\n"
"    \"query\": query,\n"
"    \"host\": host,\n"
"    \"address\": address,\n"
"    \"user\": user,\n"
"    \"ident\": ident,\n"
"    \"accept\": accept,\n"
"    \"referer\": referer,\n"
"    \"cookie\": cookie,\n"
"    \"language\": language,\n"
"    \"scheme\": scheme,\n"
"    \"connection\": connection,\n"
"    \"dnt\": dnt,\n"
"    \"gpc\": gpc,\n"
"    \"encoding\": encoding,\n"
"    \"upgrade\": upgrade\n"
"  }}\n"
"}\n";
